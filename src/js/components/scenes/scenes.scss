@use 'sass:math';
@use '../../../styles/const';
@use '../../../styles/buttons';

* {
  box-sizing: border-box;
}

:host {
  --grid: 'scenes' 1fr / 1fr;
  --max-inline-size: #{const.$max-width};
  --overflow: scroll;

  --blurb-background: #{rgba(black, .7)};
  --blurb-padding-block: 1rem #{const.$button-size + 1rem};
  --blurb-padding-inline: 1rem;
  --buffer-display: block;
  --image-position: fixed;
  --info-block-size: 3rem;
  --info-inset-block: 0 auto;
  --info-padding-inline: 1rem;
  --info-position: fixed;
  --scene-grid: 'info' 3rem 'image' 'buffer' 'blurb' 1fr / auto;
  --scene-transition: 1s ease-in-out;
  --zoom-inset-block: auto 1rem;
  --zoom-next-inset-inline: auto 1rem;
  --zoom-position: fixed;
  --zoom-prev-inset-inline: 1rem auto;

  @media (min-width: #{const.$breakpoint-1}) {
    --grid: '. scenes .' 1fr / 1fr #{const.$max-width} 1fr;

    --blurb-padding-block: 1rem;
    --buffer-display: none;
    --info-block-size: 4rem;
    --scene-grid: 'info' 4rem 'image' #{const.$max-width} 'blurb' 1fr / 1fr auto;
    --zoom-inset-block: calc(50dvh - #{math.div(const.$button-size, 2)}) auto;
    --zoom-next-inset-inline: auto 2rem;
    --zoom-prev-inset-inline: 2rem auto;
  }

  @media (min-width: #{const.$breakpoint-2}) {
    --grid: 'prev scenes next' 1fr / 1fr #{const.$max-width * 2} 1fr;
    --max-inline-size: unset;
    --overflow: hidden;

    --blurb-padding-block: 0;
    --blurb-padding-inline: 0;
    --blurb-place-self: center;
    --image-position: static;
    --info-block-size: 2rem;
    --info-inset-block: unset;
    --info-padding-inline: 0;
    --info-position: static;
    --scene-gap: 3rem;
    --scene-grid: 'image info' 2rem 'image blurb' 1fr 'image .' 2rem / 1fr 1fr;
    --scenes-place-self: center;
    --zoom-position: static;
  }
}

:host([rewind]) {
  --scene-transition: .25s linear; // Must match JS interval.
}

// Animations.
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

:host {
  block-size: 100dvh;
  display: grid;
  grid: var(--grid);
  overflow: var(--overflow);
}

// ----------------------------------------
// All scenes.

ul {
  align-items: start;
  display: grid;
  grid: 'scene' / 1fr;
  grid-area: scenes;
  inline-size: 100%;
  list-style: none;
  margin: 0;
  max-inline-size: var(--max-inline-size);
  padding: 0;
  place-self: var(--scenes-place-self, start center);
}

// ----------------------------------------
// Individual scene.

li {
  display: grid;
  gap: var(--scene-gap);
  grid: var(--scene-grid);
  grid-area: scene;
  inline-size: 100%;
}

// Scene media.
img {
  aspect-ratio: 1;
  background: white;
  block-size: auto;
  display: grid;
  grid-area: image;
  inline-size: 100%;
  inset-block: var(--info-block-size);
  max-inline-size: const.$max-width;
  position: var(--image-position);
  transition: opacity var(--scene-transition), transform var(--scene-transition); 
  z-index: -1;

  [aria-hidden='true'] & {
    opacity: 0;
    transform: scale(.1);
  }

  [aria-hidden='true'][data-viewed] & {
    transform: scale(10);
  }
}

// Scene text.
.info {
  align-items: center;
  block-size: var(--info-block-size);
  display: flex;
  gap: 0 1rem;
  grid-area: info;
  inline-size: 100%;
  inset-block: var(--info-inset-block);
  max-inline-size: var(--max-inline-size);
  padding-inline: var(--info-padding-inline);
  position: var(--info-position); 
  transition: opacity var(--scene-transition);
  z-index: 1;

  [aria-hidden='true'] & {
    opacity: 0;
  }
}

.info p {
  margin: 0;
}

.distance {
  display: flex;
  flex: 1;
  flex-wrap: wrap;
  gap: 0 1rem;
  grid-area: distance;
}

.power {
  font-size: clamp(1rem, 1rem + .5vw, 1.5rem);
}

.power > sup {
  font-size: .75em;
  margin-inline: .125em 0;
}

// Presentational element that provides a big gap before the blurb equal to the
// image's height. Since the image is fixed, this makes the blurb start where
// expected (instead of on top of the image) and makes it scroll over the image
// on small screens, which is nicer than scrolling both the image and blurb.
hr {
  aspect-ratio: 1;
  border: 0;
  display: var(--buffer-display);
  grid-area: buffer;
  inline-size: 100%;
  margin: 0;
}

.blurb {
  background: var(--blurb-background);
  grid-area: blurb;
  opacity: 0;
  padding-block: var(--blurb-padding-block);
  padding-inline: var(--blurb-padding-inline);
  place-self: var(--blurb-place-self, start);

  [aria-hidden='true'] & {
    block-size: 0;
    overflow: hidden;
  }
  
  [aria-hidden='false'] & {
    animation: fadeIn 1s .75s forwards;
  }

  [rewind] & {
    animation: unset;
    display: none;
  }
}

.blurb > p {
  line-height: 1.5;
  margin-block: 0 1rem;
}

// ----------------------------------------
// Prev/next buttons.

.zoom {
  block-size: const.$button-size;
  border-radius: math.div(const.$button-size, 2);
  color: #ccc;
  display: grid;
  inline-size: const.$button-size;
  inset-block: auto 1rem;
  padding-block: 0;
  padding-inline: 0;
  place-content: center;
  place-self: center;
  position: var(--zoom-position);
  z-index: 1;
}

// Prev/next icons.
.zoom > svg {
  block-size: 100%;
  fill: none;
  inline-size: 100%;
  stroke: currentColor;
  stroke-width: 2px;
}

// Prev/next buttons have fixed position on small screens, then use grid
// placement when the viewport gets wider.
[id='prev'] {
  grid-area: prev;
  inset-block: var(--zoom-inset-block);
  inset-inline: var(--zoom-prev-inset-inline);
}

[id='next'] {
  grid-area: next;
  inset-block: var(--zoom-inset-block);
  inset-inline: var(--zoom-next-inset-inline);
}

// Rewind button.
.rewind {
  margin-block: 1rem;
  padding-inline: .75em 1em;
}
