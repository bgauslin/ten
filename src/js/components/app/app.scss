@use 'sass:math';
@use '../../../styles/const';
@use '../../../styles/buttons';

:host {
  --app-grid: 'scenes scenes scenes' 1fr 'prev . next' #{const.$button-space} / #{const.$button-space} 1fr #{const.$button-space};
  --scene-gap: #{const.$gap-small};
  --scene-grid: '. . . .' 0 '. distance power .' 'image image image image' '. blurb blurb .' 1fr / 0 1fr auto 0;
  --zoom-position: fixed;

  @media (min-width: #{const.$breakpoint-1}) {
    --app-grid: 'prev scenes next' 1fr / 1fr #{const.$max-size} 1fr;
    --scene-grid: '. .' 0 'distance power' 'image image' #{const.$max-size} 'blurb blurb' 1fr / 1fr auto;
    --zoom-position: static;
  }

  @media (min-width: #{const.$breakpoint-2}) {
    --app-grid: 'prev scenes next' 1fr / 1fr #{const.$max-size * 2} 1fr;
    --scene-gap: #{const.$gap-medium} #{const.$gap-large};
    --scene-grid: 'image distance power' 'image blurb blurb' 'image . .' 1rem / #{const.$max-size} 1fr auto;
    --scenes-place-self: center;
  }
}

// Animations.
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

// [1] Ensures buttons are anchored to bottom of viewport on small screens and
//     provides vertical centering on large screens.
// [2] Prevents scrolling otherwise caused by the 10x images.
:host {
  display: grid;
  grid: var(--app-grid);
  min-block-size: 100dvh; // [1]
  overflow: hidden; // [2]
}

// ----------------------------------------
// All scenes.

ul {
  display: grid;
  grid: 'scene' 1fr / 1fr;
  grid-area: scenes;
  inline-size: 100%;
  list-style: none;
  margin: 0;
  padding: 0;
  place-self: var(--scenes-place-self, start);
  position: relative;
  z-index: 1;
}

// ----------------------------------------
// Individual scene.

li {
  display: grid;
  gap: var(--scene-gap);
  grid: var(--scene-grid);
  grid-area: scene;
  inline-size: 100%;
}

// Scene media.
img {
  aspect-ratio: 1;
  background: white;
  block-size: auto;
  display: grid;
  grid-area: image;
  inline-size: 100%;
  place-self: center;
  transition: opacity 1s, transform 1s;
  vertical-align: middle;

  [aria-hidden='true'] & {
    opacity: 0;
    transform: scale(.1);
  }

  [aria-hidden='true'][data-viewed] & {
    transform: scale(10);
  }
}

// Scene text.
:is(.distance, .power) {
  align-self: baseline;
  margin-block: 0;
  transition: opacity 1s;

  [aria-hidden='true'] & {
    opacity: 0;
  }
}

.distance {
  display: flex;
  flex-wrap: wrap;
  gap: 0 1rem;
  grid-area: distance;
}

.distance > :nth-child(2) {
  opacity: .9;
}

.power {
  font-size: clamp(1rem, 1rem + .5vw, 1.5rem);
  grid-area: power;
}

.power > sup {
  font-size: .75em;
  margin-inline: .125em 0;
}

.blurb {
  grid-area: blurb;
  opacity: 0;
  
  [aria-hidden='true'] & {
    block-size: 0;
    overflow: hidden;
  }
  
  [aria-hidden='false'] & {
    animation: 1s .75s forwards fadeIn;
  }
}

.blurb > p {
  line-height: 1.5;
  margin-block: 0 1rem;
}

// ----------------------------------------
// Prev/next buttons.

.zoom {
  backdrop-filter: blur(8px);
  border: 4px solid const.$button-color;
  border-radius: math.div(const.$button-size, 2);
  color: const.$button-color;
  display: grid;
  inline-size: const.$button-size;
  inset-block: auto 1rem;
  padding: 0;
  place-content: center;
  place-self: center;
  position: var(--zoom-position);
  z-index: 2;

  &:hover,
  &:focus {
    border-color: const.$button-hover;
    color: const.$button-hover;
  }

  @media (any-hover: hover) {
    transition: border-color .2s, color .2s, opacity .2s, transform .2s;
  }
}

// Prev/next buttons have fixed position on small screens, then use grid
// placement when the viewport gets wider.
[id='prev'] {
  grid-area: prev;
  inset-inline: 1rem auto;
}

[id='next'] {
  grid-area: next;
  inset-inline: auto 1rem;
}

// Prev/next icons.
svg {
  block-size: auto;
  fill: currentColor;
  inline-size: 100%;
  pointer-events: none;
}

line {
  stroke: currentColor;
  stroke-width: 2px;
}
